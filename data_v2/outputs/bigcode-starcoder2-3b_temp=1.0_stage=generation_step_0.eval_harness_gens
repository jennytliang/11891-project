[["from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\t## Initialise out variable\n\tclose_elements = False\n\n\t##  CYCLE THROUGH LIST OF NUMBERS\n\tfor idx, num in enumerate(numbers):\n\t\tfor idx2, num2 in enumerate(numbers):\n\t\t\t## Don't check if itself\n\t\t\tif idx != idx2:\n\t\t\t\t## Check if they are close\n\t\t\t\tdiff = abs(num - num2)\n\n\t\t\t\tif diff < threshold:\n\t\t\t\t\tclose_elements = True\n\t\t\t\t\tbreak\n\t\t\n\t\t## Set flag to True as soon as we have seen two numbers close \n\t\tif close_elements:\n\t\t\tbreak\n\n\treturn close_elements\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n"], ["\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n...\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\treturn\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n/README.md```\nfrom trees import parse_nested_parens\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n#config\ncmd_parser = 'config.yml'\nhippah_parser = 'hippah.yml'\nconfig = False\nremoval_script = 'python clean.py'\nlog = 'pyy.log'\nhelp = 'help'\nPyY\n===\nPyY stands for Python, Yolk, Language Extensions, Pseudo-Real Extension and PyY - Just \na script for yak shaving. I got a few ideas for it when I was much closer to no\nexperience in Python and wanted to push myself from my consistency to something a\nbit more nub. My good friends Jeetu and Nathan both suggested PyY for our heyday.\n\nHence the name of the project.\n\nInstallation\n============\nThe package is up on GitHub. Clone the repo and issue the following command to \ninstall:\n\n`pip install .`\n\nYou can also download the repository and install using `python setup.py install`.\n\nOverview\n=========\nThe PyY script is for yak shaving by saving some of the boilerplate code for web dev.\n\nSupported Tools\n---------------\nAt first release of PyY, only two tools will be implemented: Hippah and Config Yolk.\n\nHippah\n^^^^^^\nPyY will allow you to use Hippah to create your config file to populate in your \n`__init__.py.`\nIn doing so, PyY will allow you to select which files to include and which to exclude\n`scripts`, `tests`, etc. by prefixing the directory name with ``!``, as in::\n\n    @|[tab]\n    @DustDevils/\n    !dust/\n\nHere, we can see that we would have a package called `DustDevils` and its sub-package\n`dust` would be excluded from our config, as if `dust/herder.py` was never there.\nYes. This is where PyY's magic lies.\n\nConfig Yolk\n^^^^^^^^^^^\nPyY will allow you to use Config Yolk to import your config files just like in Webpack,"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n"], ["\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n#----------------------#\n    return string + reverse(find_prefix(string) + reverse(find_suffix(string)))\n\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n"], ["\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n<!-------\n\n    # Chapter 2-3: Hands on Practice with Tests in Python3\n\n    # SubSection Practice Problems - Hands on Practice with Tests\n\n> add_ten_to_list([23, 12, 43])\n\n    return [33, 22, 53]\n\n> tests.assert_equals(add_ten_to_list([23, 12, 43]), [33, 22, 53])\n\n> tests.assert_equals(add_ten_to_list([23, 12, 43]), [33, 22, 53],\n    # correctResult = [33, 22, 53],\n    # received = add_ten_to_list([23, 12, 43]))\n\n> tests.assert_equals(add_ten_to_list([23, 12, 43]), [33, 22, 53],\n    # correctResult = [33, 22, 53],\n    # received = [33, 22, 53],\n    # macroArguments = {\n    #     'correctResult': [33, 22, 53],\n    #     'received': [33, 22, 53],\n    # })   \n\n>  git clone https://github.com/testy2/hr-france\n>  cd hr-france\n\n>>> python tests.py\n\n    ok\n\nCreate Python Tests\n    Getting workflow set up with\u00a0test.py\n    Basic asserts in\u00a0test.py\n    Binding tests to functions in\u00a0test.py\n    Verifying output from\u00a0assert_equals\n\n>>> tests.assert_equals('hello', 'hello')\n\n    ok () 0.000s\n\n!!! handle error\n    ok () 0.000s\n\n>\n\n>\n\n>\n\n-->\n\n* Summary\n    * Evaluation Style in Python\n        * now with print statements\n        * now with tests\n    * Who Should Do What When Writing Python Code\n    * Mistakes That Everyone Wins\n    * Responsibility in Collaborating in Teams\n    * Good Integrated IDEs"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n/week03-Trees/sadegh07_hw3.12.py"], ["\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n"], ["\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfrom typing import Dict\n\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\nimport java.util.List;\n\n/**\n * <a href=\"https://adventofcode.com/2021/day/4\">Day 4</a> of <a href=\"https://adventofcode.com/2021/\">Advent of Code 21</a>\n */\npublic final class Day04 implements Puzzle {\n\n  @Override\n  public void solve() {\n    List<PuzzleInput> input = getInput();\n    BoardBuilder boardBuilder = new BoardBuilder();\n\n    int lastBingo = -1;\n    int finalScore = -1;\n    for (int draw : input.get(0).getAsInts()) {\n      boolean gameOver = false;\n      for (Board board : input.subList(1, 5)) {\n        gameOver = board.ballHits(draw);\n        if (gameOver) {\n          int score = board.calculateScore();\n          lastBingo = draw;\n          finalScore = score;\n          bringos) {\n    int answer = p.getBoards().stream().findFirst().get()\n     .toList().stream()\n     .flatMap(List::stream)\n     .mapToInt(i -> i)\n     .sum() * draw;\n    return answer;\n  }\n\n  private static final class BoardBuilder implements PuzzleInput.InputSplitBuilder<Board> {\n\n    private final int rowLength;\n    private final int colLength;\n    private final Board board = new Board();\n\n    public BoardBuilder(int rowLength, int colLength) {\n      this.rowLength = rowLength;\n      this.colLength = colLength;\n    }\n\n    @Override\n    public Board build() {\n      return board;\n    }\n\n    @Override\n    public BoardBuilder processLine(String line) {\n      String[] split = line.split(\"\\\\s+\");\n      split.forEach(m -> {\n        int number = Integer.parseInt(m);\n        board.drawMark(number);\n        if (board.isFinished() || (board.isMarkedNumberYet() && board.isBingo())) {\n          board = new Board(rowLength, colLength);\n        }\n      });\n      return this;\n    }\n  }\n\n  private static final class Board {\n    private final int rowLength;\n    private final int colLength;\n    private final int[][][] board;\n    private boolean[][] checked;\n\n   "], ["\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n/07_grades2/results2.py\n\"\"\" File grades.txt containing one or more lines:\nA student num1 score1 num2 score2 ... numn score2\nWrite a Python program to sort students by name not by id (record key=last name)\n\"\"\"\n\nimport listutils\n\nresult1 = listutils.add_screens([listutils.get_records()])\nresult2 = listutils.add_screens([listutils.sort_keys(result1, 0, reverse=True)])\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\t# your code here\ntest1\n\n* test2\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\t# TODO: <Your code here>\n\traise NotImplementedError\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n\nfilter_integers(['a', 3.14, 5])\n\n/users/model.py\nfrom flask_sqlalchemy import SQLAlchemy\n\ndb = SQLAlchemy()\n"], ["\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n# use index function length\n    return len(string)"], ["\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n# YOUR CODE HERE"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n#about complex numbers"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\t# IMPLEMENTATION HERE\n\tres = []\n\tfor x in numbers:\n\t    if x not in res:\n\t        res.append(x)\n\n\treturn res\n\n"], ["\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\nflip_case('hELLo')/old-uni-course/1_university/zadania_2/03_empty_elements.r\nlibrary(dplyr)\nnumbers_table <- read.table(\"~/numbers.txt\", header = FALSE)\nnumbers_data <- data.matrix(numbers_table)\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n\t# YOUR CODE HERE\n    raise NotImplementedError()\n\"\"\"Calculate a value of given sequence for given value of parameter s. It should be a fractional number of the arithmetical and/or geometrical progressions.\nTake this article for clarification: Terms for number series\nStarting from 0, means that \na 0 = 0 \n\nfxn\na 1 = \na {n} = x1 + d(n-1) \nf{n} = (a{n} &plus; a{n-1})/2\n\"\"\"\n\n"], ["\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\ndef get_product_gt_5(l: list) -> int:\n    \"\"\"Returns the product of the largest significance-digit prime in the\n    list, and the largest number in the list that shares that signficance \n    without repeating a digit.\n    \n    >>> get_product_gt_5([6621, 3171, 1297])\n    1854\n    \n    Even though 3171 doesn't repeat any of the exponential digits, 6621 does \n    and creates a larger product than 1297.\n    >>> get_product_gt_5([-546, -91, -32, -17, -8, -16, 0, -10, -8, -42])\n    -100\n    \n    Here 0 and 16 have longer sequences of triplicates in the numbers of the \n    list, but get_product_gt_5 budgets to get only a significant digit\n    from -8 (since it's prime).\n    \"\"\"\n    \n    def outside_powers(num):\n        \"\"\"Out of the exp power of arguments of the number, \n        returns the positive ones multiplied.\"\"\"\n        \n        result = []\n        \n        for exponent in power_list:\n            arg = 2 if exponent > 0 else int(str(num)[1:]), exponent\n            result.append(n ** abs(arg))\n        return result\n\n    def get_product_symb(arr):\n        \n        product = 1\n        \n        for arg in arr:\n            product *= max(arg, key=len)\n        \n        return product\n\n    def get_last_digit(arg, exp):\n        \"\"\"Returns the last digit of the exp-th power of argument, \n        if there is none, it returns None\"\"\"\n        \n        if exp == 0:\n            return 1 if arg % 2 == 0 else 2\n        elif exp == 1:\n            return int(str(arg)[-1]) if arg % 2 != 0 else 4\n        \n        else:\n            arg = str(arg)[-1]\n            mult = 1\n            for letter in str(arg)[:-1]:\n                mult *= int(letter)\n            \n            part = n ** (exp - 1)\n            \n            return mult if part % 2 == 0 else mult * 3\n    \n    max_value, power_list = arr,"], ["\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n/hackerearth/chef/chefflst.py\n\"\"\"\nQ. https://www.hackerearth.com/practice/basic-programming/input-output/basics-of-input-output/practice-problems/algorithm/chef-saves-the-world/\n\nChef has just purchased a new kite. The kite is\nan arc welding machine. It requires much pres100000007\n\n\n\nfor _ in xrange(int(input())):\n    n,d = map(int,input().split())\n    items = map(int, input().split())\n    lc,hc= [0]*n+[0]*n, [0]*n+[0]*n\n    lc[0],hc[0]=items[0],items[0]\n    for i in xrange(1,n):\n        lc[i]=lc[i-1]+ items[i] - items[i-1]\n        hc[i]=hc[i-1]+(items[i]-items[i-1])\n    dp=[lc[i] for lc in range(n)]\n    for i in xrange(n):\n        for j in xrange(n,i,-1):\n            if j >= n:\n                continue\n            dp[i]=min(dp[i],lc[j-1]-lc[i-1]+dp[j])\n    ans = 0\n    for k in hc+hc+hc:\n        if d >= k:\n            ans = (ans+d//k * k) % MOD\n        else:\n            continue\n    print(ans)\nure to\nwork to have the kite flame up properly. The heavier\neach segment is, the more force is needed to raise it\nand start it.\n\nChef found a lot of kite flying in nearby trees and\nthought a breeze could help (i.e. a wind from the\nnorthwest opinionally). He plans to use it in a few\nplaces, first simply raising kite segments up to\ncertain height and later using to do arc welding.\nYou are given the price of material required for\na segment and a desired arc length. Compute\nthe total cost if it is done with a breeze.\n\"\"\"\nINF = 1000000007"], ["\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n/exercise_05(pdf_173).py\n\"\"\"Exercise 5 (PDF 173)\n\nExplain in your own words why lists are mutable.\"\"\"\n\n\"\"\"Lists are mutable because we can change or add to them based on specific indicies\"\"\"/question_1a_2.py\n\"\"\"Question 1a(2)\n a.3\u22170.23\u22171.4 + \u22120.12\n b.15\u22170.003\u2217\u2212147 + 1.44\u203e10^\u221215\n c.0.44\u2217(\u22123\u221710^\u221211) \u2212 0.0607\n\n>>> # Program to print  day\n/question_5_1.py\n\"\"\"Question 5.1  (Chapter 4, pp. 119 - 120)\n Additions to the Counter model\n\nWhat do you think the Counter model stands for? To release barometer or precipitation data?\n\nWhat kind of barometer reading could be modeled by a Counter instance, e.g., what does a negative int value mean?\nn model a barometer that \u201ctumbles\u201d the counter to and fro, causing the numbers to add to a larger number?\n\nThe integer logarithmics?\"\"\"\n"], ["\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n"], ["\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n"], ["\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n''' 855\nAdd and Search Word - Data structure design\n\nDesign a data structure that supports the following two operations:\n\nvoid addWord(word)\nbool search(word)\nword may contain the dot character '.' to represent any one letter.\n\nFor example:\n\naddWord(\"bad\")\naddWord(\"dad\")\naddWord(\"mad\")\nsearch(\"pad\") -> false\nsearch(\"bad\") -> true\nsearch(\".ad\") -> true\nsearch(\"b..\") -> true'''\n\nimport collections\n"], ["\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n```def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    # implement this\n    passYou can reopen the previous solution again by clicking on Practice This: spoilers below.It is often the case that implementations that pass simple unit tests, are not fully ideal that they pass other tests we have not unit tested.  Exercise 6 below explores more about doctoring code so that it is pass all your tests.def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    temp = []\n    for i in range(0, len(l), 2):\n        temp.append(i)\n    # sorting algorithm to go from temp to l in the even indicies\n    temp = [1, 2, 3]\n    print(temp.sort())\n    temp = l\n    return temp"], ["\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n#   cycle groups of three characters.\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range(len(s) // 3)]\n    # reverse cycle for e.g. groups of \"bet\" => \"bet\", \"ete\", \"etb\", \"bet\"\n    groups = [group[-1] + group[1:] for group in groups]\n    return groups[0]\n\n"], ["\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n\t...\n"], ["\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n"], ["\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\nclass arrw:\n    \"\"\"\n    \"\"\"\n    def __init__(self, arr):\n        self.arr = arr\n        self.start = 0\n        self.end = len(arr)-1\n\n    def push(self, obj):\n        \"\"\"\n        \"\"\"\n        self.end += 1\n        self.arr[self.end] = obj\n\n    def get(self):\n        \"\"\"\n        \"\"\"\n        return self.arr[self.start]\n\n    def disp(self):\n        \"\"\"\n        \"\"\"\n        print(self.arr)\n\n    def pop(self):\n        \"\"\"\n        \"\"\"\n        obj = self.arr[self.start]\n        self.start += 1\n        return obj"], ["\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\ndef list_minus_list(l1: list, l2: list):\n    \"\"\"Return list with elements in l1 after removal of elements in l2.\n    By element, see the function remove()\n    >>> list_minus_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [])\n    [(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)]\n    >>> list_minus_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 6, 7, 10])\n    [(1, 3, 4, 5, 8, 9)]\n    >>> list_minus_list([41, 10, 28, 100, 13, 111, 190, 92, 90, 583, 99], [0, 28, 90, 99])\n    [(41, 10, 100, 13, 111, 190, 583)]\n    \"\"\"\n    # Hint 1: if i'm going to use processing lists, it is a good idea to save job start points\n    # Hint 2: I really don't want the copy module (or even deepcopy())\n\n    # re done with zip and further refined work on the map\n\n    if len(l1) == 0 or len(l2) == 0:\n        return [l1]\n    else:\n        inc_all = [l1]\n        start_point = 0\n        while len(inc_all) > 0:\n            counter = 0\n            inner_result = iter_result(map(lambda e: e[0], list_minus_list(remove(start_point, e[0], e[2]), l2)))\n            for e in inner_result:\n                #print(e)\n                counter += 1\n            inc_all.append(counter)\n            start_point += counter\n        return inc_all\n"], ["\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\tcount = 0\n\n\tfor i in range(len(l)):\n\t\tfor e in l:\n\t\t\tif count == 1:\n\t\t\t\tbreak\n\t\t\tif l.count(e)!= 0 and l.count(e*(-1)) !=0:\n\t\t\t\tif i == (len(l)-1):\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\t\tif count == 1:\n\t\t\tbreak\n\n\n\treturn count >= 2\n\n\n\tpairs_sum_to_zero([1, 3, -2, 1])\n    "], ["\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n#    digits = {10: 'a', 11: 'b', 12: 'c', 13: 'd',"], ["\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n"], ["\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n"], ["\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n#     print(l)"], ["\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n"], ["\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n#   x % (3 ** 2)\n    return (\n        reduce(lambda r, i: (r * p) % p, xrange(n), x)\n        if n < 3\n        else x % (p ** 3)\n        )\n"], ["\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n# YOUR CODE HERE\n    return \"\".join([chr((ord(ch) - 5 - ord(\"a\")) % 26 + ord(\"a\")) for ch in s])\n/courses/course3/Advanced_Statistics/Clustering/GMM/KMeans/BGMV/classifier.py\nfrom sklearn.mixture import BayesianGaussianMixture\nfrom sklearn.ensemble import BaggingClassifier\nimport numpy as np\n\n"], ["\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n"], ["\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n/resource_x/tidgetYrtonlehg/questions/0002.py"], ["\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n\treturn x + y\n\nTable = TableType['RowType']\n"], ["\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n"], ["\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n"], ["\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n"], ["\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n"], ["\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n"], ["\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\npass\n"], ["\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\ndef product_to_n(n: int):\n    pass\n    \"\"\"product_to_n is a function that returns the product of numbers from 1 to n\n    >>> product_to_n(30)\n    6833583969382467224491549441313058521275049710400000000000\n    >>> product_to_n(100)\n    9332621544394415268169923885626670049071596826438162146859296389521759999322991560894146397615651828625369792082722375825118521091686400000000000000000000000\n    >>> product_to_n(5)\n    120\n    >>> product_to_n(10)\n    3628800\n    \"\"\""], ["\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n"], ["\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n"], ["\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n"], ["\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n=======\n    \n    def vowels_count(s):\n        \"\"\"Write a function vowels_count which takes a string representing\n        a word as input and returns the number of vowels in the string.\n        Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n        vowel, but only when it is at the end of the given word.\n\n        Example:\n        >>> vowels_count(\"abcde\")\n        2\n        >>> vowels_count(\"ACEDY\")\n        3\n        \"\"\"\n        "], ["\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n"], ["\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n#     import re "], ["\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n"], ["\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n"], ["\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\nsearch([5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 4, 5, 5])\n/codewars/backbonelength.py\n'''\nAlgorithm to get the length of the longest backboned string in a given list of strings\n\nStrings are considered length zero at index 0\nNote that an empty string is not counted.\n'''\n"], ["\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n"], ["\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n"], ["\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\nfrom fnmatch import fnmatch"], ["\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n/codefights/python/beginner/largest.py"], ["\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n"], ["\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n):\n    return replace_end_equal(user_ip[1:])\n\nfor address in user_ips:\n    print(make_valid_url(address))user_ips = [\n    \"1.1.1.1\",\n    \"1.2.3.4\",\n    \"192.168.1.1\",\n    \"172.16.17.32\"\n]\n"], ["\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n"], ["\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n"], ["\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n"], ["\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n"], ["\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n/Longest Substring With SQL and Python Code/003_Longest_Substring_Valid_Parentheses.py"], ["\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n"], ["\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n/try-snippets/learning_lists/basic_sort_extend_zips.py"], ["\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n# %% [markdown]"], ["\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\nqueue  = deque()\nqueue.append()\n"], ["\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n"], ["\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\ndef todos(todos):\n    \"\"\"\n    Write a function shorten_long_words that takes string and returns\n    string where all words of 12 or more characters are replaced by a string of 6 characters\n    (first 6 letters of the word) in upper case.\n    If given word (less than 6 characters) actually isn\u00a1\u00aft even longer than a string length itself,\n    don\u00a1\u00aft modify it, just add to the output string provided.\n\n    Example:\n    >>> shorten_long_words('When you are bored go to class')\n    \"When you are [...]\"\n    >>> shorten_long_words('We are')\n     \"We are\"\n    >>> shorten_long_words('words words words')\n\n    \"\"\"\n"], ["\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\ndef dna(alignments):\n    \"\"\"Given a number of aligned sequences, find unique matches.\n    \n    Return a list of matches by DNA sequence, such as ['A', 'T'], where\n    the length of the match is equal to the sequence length minus one.\n    \n    Examples:\n    dna([\"A--\", \"AT-\", \"T--\"]) == ['A', 'T']\n    dna(['A--T', 'A--T']) == ['A', 'T']\n    dna(['-A--T-', 'ATA--']) == ['A', 'T']\n    \"\"\"\n"], ["\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n/unit-3/recursion/recursion.py"], ["\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n####################################################\n    ### YOUR CODE GOES BELOW\n    alphabet_ltr = list(string.ascii_lowercase) \n    alphabet_ltr_upper = list(string.ascii_uppercase) \n    \n    s_upper = [x \nfor x in s.upper()] \n    s_lower = [x \nfor x in s.lower()] \n    \n    alphabet_ltr1 = alphabet_ltr[2:]\n    alphabet_ltr1.extend(alphabet_ltr[:2]) \n\n    encrypt_string_upper0 = []\n    for x in s_upper: \n        try: \n            encrypt_string_upper0.append(alphabet_ltr_upper[alphabet_ltr_upper.index(x)+2])\n        except: \n            encrypt_string_upper0.append(x)\n\n    encrypt_string_lower0 = [] \n    for x in s_lower: \n        try: \n            encrypt_string_lower0.append(alphabet_ltr1[alphabet_ltr1.index(x)+2])\n        except: \n            encrypt_string_lower0.append(x)\n\n    encrypt_string_upper = ''\n    for x in encrypt_string_upper0: \n        encrypt_string_upper += x\n\n    encrypt_string_lower = ''\n    for x in encrypt_string_lower0: \n        encrypt_string_lower += x\n        \n    answer = encrypt_string_lower + ' ' + encrypt_string_upper \n    return answer "], ["\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n"], ["\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n"], ["\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n'''"], ["\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\t# Implement your function here\n    # Set up a vowel dictionary     \n\tvowels = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a'}\t \n\t# Set punctuation tracker and replace it all in the message prior to encoding\n\tpunct_tracker = []\n\tfor char in message:\n\t\tif char in string.punctuation:\n\t\t\tpunct_tracker.append(char)\n\tmessage = message.translate(str.maketrans('', '', string.punctuation))\n\t# Encode entire message, then replace vowels off by two in the dictionary, then combine punctuation list back with final message\n\treturn ''.join([message.replace(key, vowels[key]) for key in message] + punct_tracker)---\nlayout: home\ntitle: js_lab\npermalink: /labs/\n---\n"], ["\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n/decorators/clock.py\nfrom datetime import datetime\n\n"], ["\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\tpass\n"], ["\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\ndef count_up_to_internal(n):\n    x=0\n    prime=[]\n    for i in range(2,n+1):\n        if is_prime(i) is True:\n            x=x+i\n            prime.append(n)\n    if x == True:\n        return (i)\n    else:\n        return False"], ["\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\n'''\n \n27%) Define a function that accepts three arguments:\n  an array of integers, a sum, and a target integer. Return \n    the array item(s) that sums up to the target argument(s). \n    If there are multiple answers to print, select only \n    the smallest section where array item positions are smallest.\n    Arrays can be empty and/or contain duplicates.\n    For example:\n    special_sum([9, 2, 6, 8, 9, 12, 47], 45, 5) can return \n    either [8, 9, 12] or [12] as [12, 9, 8] and [9, 12, 8] \n    don't sum up to 45.\n    numbers([84, 32, 40, 50, 72, 65], 115) should return [72, 65]\n    '''\n    def sum_up(array, s, t):\n      solutions = []\n    \n      for i in range(0, len(array)):\n          for b in range(0, len(array)):\n              if i != b:\n                  if array[b] + array[i] == t:\n                      arrays.append(array[i])\n                      arrays.append(array[b])\n    \n      return solutions\n    \n    print(sum_up([84, 32, 40, 50, 72, 65], 115))\n    \n28%) Create a function that  accepts an array of integers and returns an array of integers with the largest element of each group as its element.    The array will contain an even number of elements. \n    For example:\n    [14, 23, 24, 61, 32, 62, 1, 9, 1] => [23, 61, 32, 9]\n    [15, 14, 23, 31, 202, 58, 1, 17] => [31, 202, 202, 17]\n    [14, 23, 31, 202, 58, 1,"], ["\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n```### Observations:\n> Note that the function str.isupper() effectively checks uppercaseness and is not eager on non-whitespace (`.startswith`, `.endswith` further flatten these lists)### Answers:def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = set('aeiou')\n    return sum(c.isupper() for n, c in enumerate(s) if n % 2 and c in vowels)"], ["\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n################################################################################\n\n    def abso(x):\n        return abs(x)\n\n    closest_value = 0\n\n    closest_value = value\n    for number in value:\n        if abso(number - closest_value) > abso(value - closest_value):\n            closest_value = value \n            return number\n    \n    "], ["\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n"], ["\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n"], ["\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nimport re\n\n"], ["\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n/handmadejs/codewars_problem_solver/on_track.js\n// Write a function that receives two arguments, a name of day and a week day number.\n// You must return Boolean and depend on the values and following rules:\n// If day equals 'Friday' you must return False\n// If day in 'Saturday' or 'Sunday' you must return False\n// If weekday is 1 you must return True\n// Else you must return True\n// WARNING: For TurboFish shape check in theises examples: \n// f(true, 1) => false\nfunction onTrack(day, weekday) {\n    function isExcludedDay(day) {\n        return (day === 'Friday' || day === 'Saturday' || day === 'Sunday');\n    }\n    return (!isExcludedDay(day) && weekday === 1);\n}\n\n/handmadejs/clicktrap/app/app.js\n(function() {\r\n    'use strict';\r\n\r\n    angular.module('GlobalGameApp.example', []);\r\n})();\r\n/clean_rangeof#s/remove_string_ranges.js\n// Create a method called range where it receives a string of integers separated by '-' and removes\n// all the intervals, not only that. For non-negative integers only.\n\n// Example\n// Example #1:\n\n// range(\"1-10\") # should return 1 2 3 4 5 6 7 8 9 10\n// Example #2:\n\n// range(\"8-9\") # should return 8 9\n// Personaly?: I think this require consider to reduce concatenates additional to string.\nfunction range(string) {\n    return string.split(/\\-/).reduce(function(numbers, str) {\n        return numbers.concat(Array(parseInt(str, 10))\n           .from(k => parseInt(k, 10)).slice(1).concat([parseInt(str, 10)]));\n    }, []);\n}\n/fullstack4/01_calculator/calc_app.js\nvar exp = calcApp.expression;\nvar terms = [];\n\ncalcApp.format = {\n    left: \"\u207c\",\n    op: \"\u207a\",\n    right:"], ["\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n##########################################################################"], ["\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n"], ["\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n"], ["\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n```\n"], ["\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n"], ["\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n"], ["\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n/String/mandatory_substring.py\n\"\"\"A substring is a part of a given string. For example, a substring of \"ABCDEF\" is \"CDEF\", but not \"ADEF\". Both \"CDEF\" and \"F\" are substrings of \"ABCDEF\", but \"ACDEF\" is not. Implement a method substrings that returns all non-empty substrings of a given string in the lexicographical order.\nFor the sake of simplicity, the strings passed as an argument to your function will contain lower-case letters from a to z, and will contain either 0 or 1 uppercase letter, but never two uppercase letters in the same string.\n\nFor example, the output of substrings(\"abcd\") will correct ushort as\n[\"a\",\n\"ab\",\n\"abc\",\n\"abcd\",\n\"b\",\n\"bc\",\n\"bcd\",\n\"cd\",\n\"d\"]\n\nDo not use any built-in methods for reading strings in your programming language. You should do it from scratch, using the given algorithm and keeping a substring digest mantained during the process.\n\nYou don't need to implement and test the method. Focus to analyze its complexity in worst case.\n\"\"\"\n\n"], ["\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n"], ["\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n#    a=[]"], ["\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n"], ["\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\ndef validParenth(text):\n    dic = {\n        \"\\\\\":\"\\\\\",\n        \"(\":\")\",\n        \"{\":\"}\",\n        \"[\":\"]\"\n        }\n    stack = []\n    for i in text:\n        if i in dic.items():\n            stack.append(dic[i])\n        else:\n            if (len(stack) == 0 or i != stack.pop()):\n                return False\n    return stack==[]\n![python](https://img.shields.io/badge/python-3670A0?logo=python&logoColor=FFDD51&symbolColor=000000)\n\n![my\\+sql](https://img.shields.io/badge/mySQL-00f8f1?logo=mysql&logoColor=00203f)\n"], ["import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n"], ["\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\ts_array = list(filter (lambda x: bin(x).count('1'), arr))\n\tv_array = list(filter (lambda x: bin(x).count('1') == s_array[0].bit_length(), arr))\n\tu_array = list(filter (lambda x: bin(x).count('1') != s_array[0].bit_length() or x == v_array[0], arr))\n\treturn sorted(s_array) + sorted(v_array) + u_array\n"], ["\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n# Your code here"], ["\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n```\n\n**Exercise 8.25** `CockVsBullGame`\n\n1. Implement a function `play_the_game()` such that it plays the game 10 times.\n\n> Hint: You may refer to the specifications [here](https://github.com/codekata/codekata.com/wiki/The-Cock/Bull-Game).\n\n"], ["\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n"], ["\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\"\"\"\nBinary Tree Pruning\nModify the given binary tree in place, coloring the nodes according to the following rules:\n\n1. If one of the nodes is zero, color it gray\n2. If one of its child is gray, color the node black\n\nExample 1:\n\n                   5\n                  / \\\n                 5   5\n                /   / \\\n               2   3   3\n              /  /   /   \\\n             1  3   3   2\n\n** According to the rules, you need modify the tree above such that it looks like:\n\n                   5\n                  / \\\n                 1   1\n                /   / \\\n               1   3   3\n\nExample 2:\n\n                   2\n                  / \\\n                 5   5\n                / \\   \\\n               5   4   2\n              /  /   / \\\n             2   3   3   1\n\n\n** According to the rules, you need to modify the tree to look like:\n\n           5\n          / \\\n         5   4\n                     \\\n                      4\n\nExample 3:\n\n                   4\n                  / \\\n                 5   5\n                / \\   /\n               6   7 11\n\n** According to the rules, you need to modify the tree to look like:\n\n           5\n          / \\\n         6   7\n\nExample 4:\n\n                   4\n                  / \\\n                 1   0\n                /   / \\\n               9   0   2\n\n\n** According to the rule, you need to modify the tree to look like:\n\n           4\n           \n\nTry do it without recursion.\n\"\"\"\n\n"], ["\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n/CodeWars/Arguments objects Arguments methods and named parameters.js\n/////////////////////////////////////////////////////////////////////////////////////////////8\n//name, age , address , password , username , guardianOne , guardianTwo and guardianEmail\n\nconst person = (name, age, address, username, password, guardianOne, guardianTwo, guardianEmail) => {\n\n\n\n\n} },\n\t\t\"launchAverage\": {\n\t\t\t\"attack\": 1.01,\n\t\t\t\"defence\": 0.86,\n\t\t\t\"stamina\": 20.22,\n\t\t\t\"speed\": 1.07,\n\t\t\t\"energy\": 1.49,\n\t\t\t\"mobility\": 1.09\n\t\t},\n\t\t\"biologicalNumbers\": {\n\t\t\t\"weight\": 5.0472472036,\n\t\t\t\"burden\": 4.4631615453,\n\t\t\t\"stamina\": 0.0,\n\t\t\t\"power\": -7.0697557433943,\n\t\t\t\"speed\": 4.0526065938,\n\t\t\t\"energy\": -2.0772846504\n\t\t},\n\t\t\"buildPoint\": {\n\t\t\t\"attack\": 0.7748,\n\t\t\t\"defence\": 0.6521,\n\t\t\t\"stamina\": 0.2522,\n\t\t\t\"speed\": 1.6781,\n\t\t\t\"energy\": 0.00000,\n\t\t\t\"mobility\": 0.00000\n\t\t},\n\t\t\"README.md\": \"http://www.hunrealgame.com/media/w \"./articles/Jinx.jpg \"https://www.youtube.com/watch?v=MOgqDOvkeoc\"\n\t},\n\t{\n\t\t\"ability\": \"Flash!!\",\n\t\t\"attributes\": {\n\t\t\t\"Attack\": 83,\n\t\t\t\"Defence\": 57,\n\t\t\t\"Resistance\": 33,\n\t\t\t\"Durability\": 60,\n\t\t\t\"Speed\": 6,\n\t\t\t\"Energy\": 74,\n\t\t"], ["\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n"], ["\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n"], ["\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n"], ["\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n# Your code below\n\n"], ["\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n"], ["\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\tresList=[list(interval1),list(interval2)]\n\tallList=[]\n\tfor i in resList:\n\n\t\t i[0]=abs(i[0]-i[1]) \n\n\t\t allList+=i\n\tfor i in allList:"], ["\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n/2to38/README.md\nproblems 2to38 will be updated in repo and wiki: https://github.com/zhtut/ensure/\n\nOR\n\ntest online code editor/playground: https://repl.it/FdJX/0 \n\nOR\n\nrand = random.Random\nrand.seed(10)\nrand.randrange(1, 100)\n\nhttps://www.python.org/dev/peps/pep-0008/\nhttps://github.com/cert-bfs/kotlin_style_guide/master/Kotlin%20Style%20Guide.md\n\nhttps://docs.python-guide.org/writing/style/\n"], ["\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\nminPath([ [1,2,3], [4,5,6], [7,8,9]], 3) # [1, 2, 1]\nminPath([ [5,9,3], [4,1,6], [7,8,2]], 1) # [1]\nminPath([ [5,1,2], [3,4,6], [7,8,9]], 3) # [3, 4, 3]\n/0712charAt711.go\n/*\n\nGiven two strings s1 and s2, write a function that returns true if s2 contains a permutation of s1. In other words,\none of the first string's permutations is the substring of the second string.\n\nExample 1:\n\nInput: s1 = \"ab\" s2 = \"eidbaooo\"\nOutput: True\nExplanation: s2 contains one permutation of s1 (\"ba\").\nExample 2:\n\nInput:s1= \"ab\" s2 = \"eidboaoo\"\nOutput: False\n\n\nNote:\n\n     1 <= s1.length, s2.length <= 10^4\n     All characters in s1 and s2 are lower case letters\n\n\n*/\npackage main\n\nfunc main() {\n\tisContainPremutation(\"\", \"\")\n}\n\n/*\n\n\n*/\n\nfunc containPremutation(s1, s2 string) int {\n\tslice := make([][26]int, 2)\n\tfor i := 0; i < len(s1); i++ {\n\t\tslice[0][s1[i]-'a']++\n\t\tslice[1][s2[i]-'a']++\n\t}\n\tfor i := len(s1); i < len(s2); i++ {\n\t\tslice[0][s2[i]-'a']++\n\t\tslice[1][s2[i-len(s1)]-'a']--\n\t\ta := true\n\t\tfor j := 0; j < 26; j++ {\n\t\t\tif slice[0][j]+slice[1][j] != 0 {\n\t\t\t\ta = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif"], ["\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n# \uc88b\uc740 \ucf54\ub4dc 1 "], ["\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n# python-projects\n\nVarious python3 projects that I've worked on over time.\n"], ["\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n# from problem 2\n    my_list = list(string)"], ["\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n#   Program that loops through a list and sends these upper rounded items to the sum_squared_list and break when -1 print prints my_sum, else continue\n    my_sum = 0\n    sum_squared_list = []\n    for num in lst:\n        if num == -1:\n            break\n        else:\n            lst[lst.index(num)] = upper_rounded(num)\n    \n    for num in lst: \n        sum_squared_list.append(num**2)\n\n    for num in sum_squared_list:\n        my_sum += num\n    return my_sum\n"], ["\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n"], ["\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\ndef max_profit(arr):\n    '''\n    You have to buy one stock at beginning of the day and sell inventory at the\n    end of the day.\n    Write a program to calculate the maximum profit from the transaction.\n    '''\n\n    max_profit = 0\n    lowest_stock_price = arr[0]\n\n    for closing in arr[1:]:\n\n        if closing < lowest_stock_price:\n            lowest_stock_price = closing\n            continue\n\n        diff = closing - lowest_stock_price\n        max_profit = max(max_profit, diff)\n\n    return max_profit\n\narray = (100, 180, 260, 310, 40, 535, 695)"], ["\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n"], ["\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\ndef compare_one(a, b):\n    a = str(a)\n    b = str(b)\n    if a == b: return None\n    try:\n        fa = float(int(a))\n        fb = float(int(b))\n        return (a,b)[fa>fb]\n    except:\n        return (a,b)[len(a)>len(b)]"], ["\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n"], ["\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\nfrom __future__ import annotations\n"], ["\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n"], ["\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n"], ["\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nfor i,j in enumerate(lst):\n    lst[i] = j**2 if i % 3 == 0 else j**3 if i % 4 == 0 and i % 3 == 0 else j\n    "], ["\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n/test_RR/test_RL_Ordered_Merge/README.md\nWriting a merge sort extremely well a developer is advised to write a wrapper method,\nas well as a method that implements the merge sort model.\n\n\n\n**Persistence**\nNot giving number + data - storing the data, not giving control to the client as a stateful object./test_RR/test_LR_Parity_PALINDROME/solution.py\n\"\"\"\nParity\nGiven an array, return the parity of the entire array.\n\nIf the number of 0s and 1s in the array is equal, then it is even.\nIf the number of 0s is greater than the number of 1s, then the array is odd,\nand if the number of 0s is smaller than the number of 1s, then the array is even.\n\nExample:\n    Input: [1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0]\n    Output: -1\nConstraints:\n    * [1-9999]\n    * Array length is between 1 and 100\n\"\"\"\n\n"], ["\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n"], ["\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n"], ["\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n"], ["\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n/LeetCode Python Solutions/29_Divide Two Integers.py"], ["\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n'''\n(7, 9) -> [(13to4),(5to3)]\n(0, 7) -> [(11-9),(3to7),(7to4),(15-12),(3to0),(4to16-13),(2to14-11),(0to3)]\n(1, 5) -> [(5to0),(8-1),(5to4),(6to5)]\n(1, 5) -> [(10-2),(2to0),(5to4)]\n(16, 1) -> [(15-12),(2to14-11),(15to16),(1to0),(10-2),(7-6),(13to4),(5to3),(2to14-11),(15to16),(1to0),(10-2),(2to14-11),(15to16),(1to0),(10-2),(2to14-11),(15to16),(1to0)]\n(14, 5) -> [(9to8),(5to4),(6to5),(7to6),(12-1),(6to5),(7to6),(5to0)]\n(7, 1) -> [(6to5),(7to6),(12-1),(6to5),(7to6),(15to16),(1to0),(10-2),(7-6),(13to4),(5to3),(2to14-11),(15to16),(1to0),(10-2),(7-6),(13to4),(5to3),(2to14-11),(15to16),(1to0),(10-2),(7-6),(13to4),(5to3),(2to14-11),(15to16),(1to0),(10-2),(7-6),(13to4),(5to0),(8-1),(5to4),(6to5),(5to4),(6to5),(7to6),(5to3),(5to4),(6to5)]\n''''''\neasy\n'''"], ["\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n"], ["\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n"], ["\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n# YOUR CODE HERE\n    list = []\n    for element in lst:\n        if element < 1:\n            continue\n        elif element%2 != 0:\n            list.append(element**2)\n           \n    return sum(list)  \n\n"], ["\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nmarine= [4, 8, 15, 16, 23, 42]\nworm= [4, 5, 10, 16, 23, 42]\n\nfor i in range(len(marine)):\n    print(marine[i])\n    i=\n    print(i)\n    difference= abs(marine[i]-worm[i])\n    print(difference)\n        \ns=[0,0,1,1,6,10,17]\ng=[1,1,2,2,5,11]\n\nfor x in range(len(s)):\n    print(s[x],g[x])\n    \n      "], ["\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n"], ["\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n"], ["\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n"], ["\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n"], ["\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n"], ["\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n"], ["\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n#please use the test case below when submitting.\n    print(eat(5, 6, 10))\n    print(eat(4, 8, 9))\n    print(eat(1, 10, 10))\n    print(eat(2, 11, 5))\n.05*n} ${bm?iso?pgp?ib }*/\nconst BASE_DECIMAL = 1\nconst BASE_HEX = 16\nconst BASE_OCTAL = 8\n\nmodule.exports = {\n  REX_BYTES : new RegExp('^[0-9a-f]{2}[_0-9a-f]{2}[_0-9a-f]{2}[_0-9a-f]{2}$'),\n  REX_PARSABLE : new RegExp('^[ \\\\t]*(${\\\\w+}?|[0-9a-f]+)$'),\n  BASE_DECIMAL,\n  BASE_HEX,\n  BASE_OCTAL\n}\n/2018_1/first/50_game_of_life_generator/source/regex.js\n/* This file contains regular expression for various places\n *\n * LIVE outputId\n * field id = 3\n * restore from field 4\n *   e.g. Value 3 : eq = ${Code}    # C_98ad7\n * field id = 8\n *   eq = ${_4c9933_aa}\n *\n * LINE outputId\n * field id = 5\n *   eq = ${C_77777}      hex 100020001b10\n * field id = 8\n *   eq = ${_4c9933_aa}\n * field id = 11\n *   eq = ${E89CB14A}     hex 'EOx9cb14a'\n * $1 = field id\n * $2 = hex code\n * $3 = eos code\n * $4-5 = concatenated lines + up, one line in each pair:\n *     => ${LAST/2}          same osszefolttel, straight-forward 128oxel\n *     => ${STEP/3}          128ox"], ["\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n/Week 14/Solving_Linear_Equations/second_choice_solution.py\n\"\"\"\nThis project is inspired by chapter Exercise 4, multiple variables from book Capital Matters. The idea is to exhibit famous singularities in \nlinear algebra with linear operations. After solving this project, it is possible to melt at data of 3x3 matrices or determinant of 3x3 matrix, \nand to learn intuitively some properties for complicated stuff. By trying some of the ideas for fun, Some of them should put you off if you know your way around!\n\nIn this project I gave most of you tools. Because Python allows you to use number in different bases, which is fascinating! Probability paradox is also borrowed\nfrom my 6 years old daughter and his joke. The goal of this task is to resolve that solution which enables them to find a positive sum, otherwise 0. For anything\nComputers love.\n\n\n"], ["\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n/LeetCode/GUI/Form2.cs\n\ufeffusing BloomBooks.GUI.Resource;\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Windows.Forms;\n\nnamespace BloomBooks.GUI\n{\n    public partial class FormSettings : Form\n    {\n        #region Properties\n        public string Selected equations { get; set; }\n        public string Input_Path { get; set; }\n        public string Output_Path { get; set; }\n        public string EquationImagePath { get; set; }\n        #endregion\n\n        public FormSettings()\n        {\n            InitializeComponent();\n            this.CenterToScreen();\n            //Form Designer\n            l1_Input.Text = Translation.Input_Path;\n            l2_Output.Text = Translation.Output_Path;\n\n            bt_Input.Text = Translation.Choose_Directory;\n            bt_Output.Text = Translation.Choose_Directory;\n            bt_Im.Text = Translation.Choose_Folder;\n\n            Bloom Books_About.pic_BloomBooks.Top = pbxImage.Bottom + 10;\n        }\n\n        private void bt_Input_Click(object sender, EventArgs e)\n        {\n            //Get path from Dialog\n            FolderBrowserDialog dialog = new FolderBrowserDialog();\n            dialog.ShowDialog();\n            Input_Path = dialog.SelectedPath;\n            tbx_Input.Text = Input_Path;\n        }\n        private void bt_Output_Click(object sender, EventArgs e)\n        {\n            //Get path from Dialog\n            FolderBrowserDialog dialog = new FolderBrowserDialog();\n            dialog.ShowDialog();\n            Output_Path = dialog.SelectedPath;\n            tbx_Output.Text = Output_Path;\n        }\n\n        private void bt_Im_Click(object sender, EventArgs e)\n        {\n            //Get path from Dialog\n            FolderBrowserDialog dialog = new FolderBrowserDialog();\n            dialog.ShowDialog();\n            EquationImagePath = dialog.SelectedPath;\n            tbx_Image.Text = EquationImagePath;\n        }\n    }\n}\n/LeetCode/Intiros Book/Josephus Survival.py"], ["\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n# TODO\n    if not text:\n        return None\n"], ["\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n// Given an integer n, make a binary tree with today in the root node.\n// All \"today\" nodes are present in the binary tree.\n// Each successor says that the day before him has a Covid diagnosis.\n\n// Sample cases\n\nconsole.log('------------')\nconsole.log(buildCovidTree(4))\nconsole.log('------------')\n\nconst foo = new Tree();\nconst nodes = [...foo.nodes];\nconsole.log(nodes);\nconsole.log(nodes[nodes.length-1].data);\nconsole.log();\n\nfunction buildCovidTree(n) {\n  const tree = new Tree();\n  const d = new Day(n);\n  tree.addNode(d);\n  const days = new Stack(d);\n\n  for (let i = 1; i < 2 ** n; i++) {\n    if (days.length() == 0)\n      days.push(d);\n    const day = days.pop();\n    const parent = day.parent;\n    //each day has a next sibling (the next day after him)\n    let sibling;\n    if (!parent.next && day.data !== 1) sibling = new Day(day.data-1);\n    else if (parent.next && parent.next.data !== 1) sibling = new Day(day.data-1);\n    \n    parent.next = sibling;\n    //try to get a new sibling for the parentdx\n    if (parent.next == day) {\n      if (sibling) sibling.parent = parent\n      days.push(sibling);\n    }\n    if (parent.parent) {\n      //get a new parent for the day\n      let temp;\n      if (!parent.next && day.data !== 1) temp = new Day(day.data-1);\n      else if (!parent.prev && day.data !== day.parent.prev.data) temp = new Day(day.data-1);\n      else if (parent.prev && parent.next.data !== 1) temp = new Day(day.data-1);\n      else if (parent.next.data === parent.parent.next.data && (!parent.next.next || day.data != parent.parent.next.next.data)) temp = new Day(day.data-1);\n     "]]