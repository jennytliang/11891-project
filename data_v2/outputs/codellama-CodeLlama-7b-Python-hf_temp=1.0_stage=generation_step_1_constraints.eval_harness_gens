[["from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n\n    sorted_numbers = sorted(numbers)    \n\n    close_lower_bound = sorted_numbers[0] + threshold\n    close_upper_bound = sorted_numbers[-1] - threshold\n\n    close_lower_index = 0\n    close_upper_index = len(numbers) - 1\n\n    while close_lower_index < close_upper_index:\n        lower_value = sorted_numbers[close_lower_index]\n        upper_value = sorted_numbers[close_upper_index]\n        if (abs(upper_value - lower_value) < threshold):\n            return True\n        elif (lower_value <= close_lower_bound):\n            close_upper_index -= 1\n        else:\n            close_lower_index += 1\n    return False\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n\n    cnt, group, results, list_items = 0, [], [], []\n\n    for item in paren_string:\n        if item == '(':\n            cnt += 1\n            group.append('(')\n            if cnt == 1:\n                list_items.append('')\n\n        if item == '(' and cnt > 1:\n            while cnt != len(list_items):\n                list_items[-1] += '('\n            list_items[-1] += item\n\n        if item == '(' and cnt == 1:\n            list_items.append(item)\n\n        if item == ')' and len(list_items) > 0:\n            list_items[-1] += item\n\n        if item == ')' and len(list_items) == 0:\n            list_items.append(item)\n        if item == ')' and len(list_items) < 0:\n            raise ValueError('Wrong parantheses')\n\n        if item == ')':\n            cnt -= 1\n            if cnt == 0:\n                if len(group) != 0:\n                    list_items[-1] += ''.join(group)\n                    group = []\n\n        if item == '(' and cnt == 1:\n            list_items[-1] += ''.join(group)\n            list_items[-1] += item\n            group = []\n    return results\n\n"], ["\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\n\n    return number - int(number - int(number))\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        if operation == 0:\n            continue\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n    mean = sum(numbers) / sum(list(map(lambda x: 1, numbers)))\n    largest_deviation = max([abs(mean - x) for x in numbers])\n\n    return largest_deviation\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\n\n    res = []\n    for resume, element in enumerate(numbers): \n        if resume==0:\n            res.append(element)\n\n        elif resume>0 and resume<len(numbers)-1:\n            res.append(numbers[resume-1])\n            res.append(delimeter)\n            res.append(element)\n        else:\n            res.append(numbers[resume-1])\n            res.append(element)\n\n    return res\n\n\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    \n    def count_depth(depth: int, paren_string: str) -> List[int]:\n        # Base condition\n        if paren_string.count('(') == 0:\n            return depth\n\n        # Recursive call\n        return count_depth(depth+1, paren_string[:paren_string.index('(')]) + count_depth(depth, paren_string[paren_string.index('('):])\n\n    return count_depth(0, paren_string)\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n\n    return list(filter(lambda x: substring in x, strings))\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    s, p = 0, 1\n\n    for n in numbers:\n        s += n\n        p *= n\n\n    return s, p\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n\n    return [max(numbers[:(numbers.index(n) if n in numbers else len(numbers)) + 1]) for n in numbers]\n\n"], ["\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string) // 2):\n        prefix, suffix = string[:-i], string[i:]\n        if is_palindrome(prefix):\n            return prefix + suffix[::-1]\n\n    return string\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n\n    return \"\".join(str(int(a[ix]) ^ int(b[ix])) for ix in range(len(a)))\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if strings == []:\n        return None\n    else:\n        return max(strings, key=lambda s: len(s))\n\n"], ["\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    if abs(a) == 0 or abs(b) == 0:\n        return abs(a + b)\n\n    while a % b:\n        a, b = b, a % b\n    return b\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n\n    return [string[:(i + 1)] for i in  range(len(string))]\n"], ["\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n\n\n    return \" \".join(map(str, list(range(n + 1))))\n\n"], ["\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return list(map(lambda n: {'o': 4, 'o|': 2, '.|': 1}.get(n, 0), music_string.split()))\n\n"], ["\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n\n\n    occurences = 0\n    \n    length = len(string)\n    substring_length = len(substring)\n    substring_count = length - substring_length\n\n    if length == 0:\n        return 0\n\n    counter = substring_length\n    \n    while counter  <= substring_count:\n        \n        if string[counter:counter + substring_length] == substring :\n            occurences += 1\n        counter += 1 \n    \n    return occurences\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    \n    to_int = {'_': 0, 'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers = (i for i in numbers.split())\n    group = group_freq(numbers)\n    \n    answers = ''\n    for key in sorted(group):\n        if len(group[key]) == 1:\n             answers += key + ' '\n        else:\n            answers += str(min(group[key]) + to_int[key]) + ' '\n    return answers.strip()\n\n    \n    # def f(x, groups):\n    #     if len(groups[x]) == 1:\n    #         return groups[x][0]\n    #     else:\n    #         return min(groups[x])\n    \n    # groups = {'_': set() , 'zero': set(), 'one': set(), 'two': set(), 'three': set(), 'four': set(), 'six': set(), 'seven': set(), 'eight': set(), 'nine': set(), 'five': set()}\n\n    # for num in numbers:\n    #     groups[num].add(num)\n\n    # return f(min(groups, key=f), groups)\n     \n        \n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n\n    numbers.sort()\n    numbers2 = numbers[:]\n    answer = []\n    for number in numbers:\n        if abs(number - numbers2[0]) > abs(numbers2[-1] - number):\n            answer.append(numbers2.pop(numbers2.index(number)))\n        else:\n            answer.append(numbers2.pop(numbers2.index(number)))\n    return tuple(answer)\n\n\n\"\"\""], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n\n    ma, mi = max(numbers), min(numbers) # We store the maximam and minimum of the sequence in ma and mi\n    if len(numbers)<2:\n        return [0]\n    \n    resultant = []\n    for i in numbers:\n        resultant.append(1/(ma-mi)*(i-mi))  # We add the ith value of the sequence, multiplying it's value for the same factor\n    return resultant\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n\n    return list(filter(lambda x: isinstance(x, int), values))\n\n"], ["\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"], ["\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\n\n    for i in range(222, 223):\n        if n % i == 0:\n            largest_number = i\n\n\n\n    return largest_number\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    import math\n    fact = []    \n    i = 2\n\n    # naive implementation uses division\n    temp = n\n    while i <= math.sqrt(temp):\n        while temp % i == 0:\n            fact.append(i)\n            temp = temp // i\n        i += 1\n\n    if temp != 1:\n        fact.append(temp)\n    return fact\n\n"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    num_cnt = dict()\n    \n    for x in numbers:\n        if x in num_cnt:\n            num_cnt[x] = num_cnt[x] + 1\n        else:\n            num_cnt[x] = 1\n            \n    return [number for number in numbers if num_cnt[number] == 1]\n\nassert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]\n"], ["\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return \"\".join([c.lower() if c.isupper() else c.upper() for c in string])\n\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n\n    return \"\".join(strings)    \n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return list(filter(\n        lambda string: string.startswith(prefix),\n        strings,\n    ))\n\n"], ["\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return list(filter(lambda x: x > 0, l))\n\n"], ["\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<2:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    i=3\n    while i<(n**(1/2)+1):\n        if n%i==0:\n            return False\n        i+=1\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n\n    dxs = [xs[i[0]] * x[1] for i in enumerate(xs[1:])] + [xs[0]]\n    print(dxs)\n\n"], ["\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    res = sorted(l[::3])\n\n    i = 0\n    for k in range(0, len(l), 3):\n        l[k] = res[i]\n        i += 1\n    return l\n    \n"], ["\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    temp = set(l)\n    temp = list(temp)\n    temp.sort()\n    return temp\n"], ["\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n\n    return max(l)\n\nl = [-4, 6, -3, 10, -7, 5, -8, -2, 12]\nassert( max_element(l) == 12 )"], ["\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n\n    cnt = 0\n    for i in 11, 13:\n        # Find all multiples of 13 or 11 less than n\n        numb = range(i, n, i)\n        # Aggregate numbers greater than 12 \n        numb = (x for x in numb if x > 12)\n        for x in numb:\n            if \"7\" in str(x):\n                cnt = cnt + 1\n\n    return cnt\n\n"], ["\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(l) if i % 2 == 0]\n    even.sort()\n    result = [even[i - j] if i % 2 == 1 else l[i] for i in range(len(l))]\n    return result\n"], ["\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [\n        [groups[i][0], groups[i + 1][-1]] if i < len(groups) - 1 else groups[i]\n        for i in range(len(groups))\n    ]\n    return \"\".join([x for col in groups for x in col])\n"], ["\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n\n\n    import random\n    def miller_rabin_pass(a, s, d, n):\n        a_to_power = pow(a, d) % n\n        if a_to_power == 1:\n            return True\n        for i in range(s-1):\n            if a_to_power == n - 1:\n                return True\n            a_to_power = (a_to_power * a_to_power) % n\n        return a_to_power == n - 1\n\n    def miller_rabin(n):\n        d = n - 1\n        s = 0\n        while d % 2 == 0:\n            d >>= 1\n            s += 1\n        for repeat in range(20):\n            a = 0\n            while a == 0:\n                a = random.randrange(n)\n            if not miller_rabin_pass(a, s, d, n):\n                return False\n        return True\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        if n in (2, 3, 5, 7):\n            return True\n        if n % 2 == 0 or n.bit_length() in (2, 3, 5):\n            return False\n        return miller_rabin(n)\n\n    if n == 1:\n        i = 2\n        m = [2]\n    else:\n        i = 1\n        m = []\n\n    while i != n:\n        mi = 1\n        while not is_prime(i + mi):\n            mi += 1\n        i += mi + 1\n        m.append(i)\n\n    return len(m) - 1\n"], ["\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if i != j and j != k and i != k:\n                    if l[i] + l[j] + l[k] == 0:\n                        return True\n\n    return False\n\n"], ["\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n\n    return n ** 2\n    \n\ncar_race_collision_(2)"], ["\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    nl = []\n    for item in l:\n        nl.append(item + 1)\n    return nl\n"], ["\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[j] + l[i] == 0 and i != j:\n                return True\n        break\n    return False\n\n"], ["\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n\n    if x == 0: \n        return 0\n    digits = []\n    while x:\n        digits.append(x % base)\n        x = x // base\n    return ''.join(str(i) for i in digits[::-1])    \n"], ["\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n\n"], ["\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\n    \n    if n == 0  :\n        return 0 ;\n    if n == 1 or n==2:\n        return 2\n    return fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4)"], ["\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\n\n    sorted_l = sorted(l)  # log N time, because of pythons built in .sort method.\n    if len(l) % 2 == 0:\n        a = sorted_l[(len(sorted_l) // 2) - 1]\n        b = sorted_l[(len(sorted_l) // 2)]\n        return (a + b) / 2\n    else:\n        return sorted_l[(len(sorted_l) // 2)]\n\n\nmedian([3, 1, 2, 4, 5])\n"], ["\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n"], ["\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\n\n    res, x = 1, 2\n\n    for i in range(0, n):\n    \tres = (100 * res) % p\n    \tx = (x * x) % p\n\n    return res\n"], ["\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr([(ord(ch) + 21 - ord(\"a\"))][0]) for ch in s])\n\n"], ["\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n\n    return \"\".join(list(filter(lambda(x): x.lower() in \"bcdfghjklmnpqrstvwxyz\", text)))\n"], ["\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n"], ["\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n"], ["\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\n    return set(s0) == set(s1)\n\n"], ["\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\n\n    if n == 0: \n        return 0\n\n    if n <= 2:\n        return 1\n    \n    return fib(n-1) + fib(n-2)"], ["\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for c in brackets:\n        if c == '<':\n            cnt += 1\n        elif c == '>':\n            if cnt > 0:\n                cnt -=1\n    return cnt == 0\n    \n    # for (i,b) in enumerate(brackets):\n    #     print('i:', i, 'b:', b)\n    \n    \n    \n    \n    "], ["\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True     # Assume initially that list is incresing, decresing.\n\n    # Loop over pairs of adjacent list elements.\n    # Allow for indexing beyond ends of list.\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n        if inc == False and dec == False:\n            return False\n    return True\n"], ["\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(set(l1).intersection(l2)))\n"], ["\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n\n    isprime = [True]     * (n + 1)\n    p = 2\n    while p**2 <= n:\n        if isprime[p]:\n            for np in range(p * 2, n + 1, p):\n                isprime[np] = False\n        p += 1\n    prime_factors = []\n   ampion = 2\n    # We ignore 2 and 3\n    for np in range(5, n + 1):\n        if isprime[np]:\n            prime_factors.append(np)\n            cambria = np\n            while n % cambria == 0:\n                n //= cambria\n                cambria = cambria\n           ampion = np\n    # in python 10**20 is more than enough to find a factor:\n    if n > cambria:\n        prime_factors.append(n)\n    return chairs(prime_factors)"], ["\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n\n\n    return (n + 1) * (n / 2)\n\n"], ["\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    \n    for i in brackets:\n      if i is '(':\n        cnt += 1\n      elif i is ')':\n        cnt -= 1\n\n      if cnt < 0:\n       return False\n\n    if cnt == 0:\n      return True\n    return False\n\n    \n\n\n    \ncorrect_bracketing()"], ["\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n    return [xs[i]i+1* for i in range(2,len(xs))]\n\n\nxs = [3, 1, 2, 4, 5]"], ["\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\n\n    if n == 0 or n == 1:\n        return n\n    if n == 2:\n        return 1\n\n    arr = [0, 0, 1]\n    arrL = 3       \n\n    for i in range(3, n + 1):\n        arr.append(arr[i - 1] + arr[i - 2] + arr[i - 3])\n        arrL += 1\n\n    return arr[-1]\n"], ["\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return  s\n    if s == \"ry\": return 1\n    return s[len(s) - 1] == 'y' and s[-2] not in 'aeiou' and s[-2] != 'y' and \\\n        s.count('y') == 1\n\n    if s == \"\": return  s\n    if s == \"GG\": return 2\n    return -20\n"], ["\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n\n\n    s = str(x)    \n    length = len(s)\n\n    if shift <= 0:\n        return s\n\n    new_length = length - shift if length - shift > 0 else 0\n    print(new_length)\n    new_string = s[shift : length] + s[0 : new_length]\n    return new_string\n"], ["\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n    return sum([ord(ch) for ch in s if ch.isupper()])\n\n"], ["\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n\n    words = s.split(\"(\")\n\n    apples_num = int(words[0])\n    oranges_num = int(words[1][:len(words[1])-8])\n    mango_num = n - (oranges_num + apples_num)\n\n    return mango_num\n\n"], ["\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n\n    if all(val % 2 for val in arr):\n        return []\n    elif arr:\n        return [arr.index(min(arr, key = (lambda val: (val % 2, val))))]\n\n    return []"], ["\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n\n    count = dict()\n    count.fromkeys(set(lst), 0)\n\n    # Count the frequencies of numbers in lst\n    for el in lst:\n        count[el] += 1\n    \n    # Find the sampling rate of these numbers\n    avail_positive_numbers = [x for x in count.keys() if x > 0]\n    sampling_rate = []\n    i = 0\n    for el in avail_positive_numbers:\n        t = [int(i) for i in list(str(el))]\n        sampling_rate.append(sum(t))\n\n    prev_max = 0\n    for ix, el in enumerate(avail_positive_numbers):\n        sotmax = min(sampling_rate[ix], count[el])\n        if prev_max < count[el]:\n            prev_max = sotmax\n            return el\n\n    return -1\n\n\n    # return -1\n\n"], ["\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    sorted_list = sorted(lst_copy)\n    lowest, highest = sorted_list[0], sorted_list[-1]\n    index_list = [0]\n    result = []\n    while sorted_list:\n        if not index_list:\n            index_list = [0]\n        for num in index_list:\n            highest_value = max(sorted_list)\n            result.append(highest_value)\n            sorted_list.remove(highest_value)\n        for num in sorted_list:\n            lowest_value = min(sorted_list)\n            result.append(lowest_value)\n            sorted_list.remove(lowest_value)\n    return result\n\n"], ["\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    is_valid_triangle = lambda a, b, c: a + b > c and b + c > a and c + a > b\n\n    if is_valid_triangle(a, b, c):\n        half_perimeter = (a + b + c) /2\n        formula = (half_perimeter *(half_perimeter - a)\n                    *(half_perimeter - b)\n                    *(half_perimeter - c)) ** 0.5\n        return round(formula,2)\n    else:\n        return -1\n"], ["\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\n    return q == q[::-1] and sum(q) <= w\n"], ["\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    arr_reversed, c, d = list(arr), dict(), dict()\n    arr_reversed.reverse()\n\n    for item in zip(arr, arr_reversed):\n        d[item[0]] = item[1]\n\n    print(d)\n    for item in d.items():\n        if item[0] == item[1]:\n            # c[item[0]] = None\n            c[item[0]] = True\n        else:\n            c[item[0]] = False\n            c[item[1]] = False\n\n    # Now these dicts hold what needs to change and unchanged numbers\n    unchanges, needs_changes = 0, 0\n    for item in c.items():\n        if item[1] is True:\n            unchanges += 1\n        else:\n            needs_changes += 1\n\n    return needs_changes\n\n"], ["\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    c1, c2 = sum, sum\n    for i in lst1:\n        c1+=len(i)\n    \n    for i in lst2:\n        c2+=len(i)\n    \n    if c1 > c2:\n        return lst1\n    else:\n        return lst2\n"], ["\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    if a <= 1: return 0\n    a_clone = a\n\n    # 2 < a\n    while a > 0:\n        a = a / 2 \n        if a % 2 == 0:\n            if not check_prime(a_clone):\n                return False\n            a_clone = int(a_clone / 2)\n\n    # 3 < a\n    while a > 1:\n        a = a / 3\n        if a % 3 == 0 and not check_prime(a_clone):\n            return False\n        a_clone = int(a)\n    return True\n"], ["\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n\n    if x == 1: return 1\n    exp = 0\n    while n**exp <= x:\n        if n**exp != x:\n            return False\n        exp += 1\n    return True\n    "], ["\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\n    a = abs(a)\n    \n    return int(a**(1/3))*3 == a\n"], ["\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\n    \n    return len(list(list(set((filter(lambda x:next(\n        (i for i in [2,3,5,7,11,13] if i == x)) \n        or all(i % x != 0 for i in range(2, x)), \n        [ord(x) - 48 for x in num] if num.isdigit() else map( lambda y:\n        chr(ord(y) - 65 ) if 9 <= ord(y) - 48 <= 12 and all( \n        [x,y], (filter(lambda z: x %  z != 0 and z not in [2,3,5,7],\n        range(2,x  , 1)) if x not in [11, 13] else \n        filter(lambda z: x % z != 0, range(2, x if x != 11 else 13, 1)))\n        )\n        ) for y in list(num)])))))))\n\n    \n"], ["\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n    return f\"db{bin(decimal)[2:]}db\"\n    \n    return \"db\" + bis(decimal)[2:] + \"db\"\n\n"], ["\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n"], ["\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n\n    def to_letter_grade(score):\n    \n            if score>=4.0: return \"A+\"\n            if score>=3.7: return \"A\"\n            if score>=3.3: return \"A-\"\n            if score>=3.0: return \"B+\"\n            if score>=2.7: return \"B\"\n            if score>=2.3: return \"B-\"\n            if score>=2.0: return \"C+\"\n            if score>=1.7: return \"C\"\n            if score>=1.3: return \"C-\"\n            if score>=1.0: return \"D+\"\n            if score>=0.7: return \"D\"\n            if score >= 0.0: return \"D-\"\n            else: return \"E\"\n    return [to_letter_grade(each) for each in grades]"], ["\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\n    def is_prime(a):    \n        if a == 0:\n            return False\n        elif a == 1:\n            return True\n        elif a <= int(len(string) ** 0.5 + 1):\n            for x in range(2, a):\n                if a % x == 0:\n                    return False\n            else:\n                return True\n        else:\n            for x in range(2, int(len(string) ** 0.5 + 1), 2):\n                if a % x == 0:\n                    return False\n            else:\n                return True\n\n\n    return is_prime(len(string))"], ["\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n\n    if n == 1:  # One digit number can only start or end with a 1.\n        return 1\n\n    digits = n - 1\n    oneses = 10\n    count = 0\n    for i in xrange(1, 1+digits):\n        count += i * oneses\n\n    return count\n\n"], ["\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n\n    s = sum(map(map_to_binary_number, map(int_to_digits(N))))\n    print(''.join(s))\n"], ["\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\n\n    s = 0\n    s += lst[1]\n    s += lst[3]\n    s += lst[5]\n    return s\n\n"], ["\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n\n    words = s.split(\" \")     # list of words in s\n    result = \"\"\n\n    for word in words:\n        if len(word) == 1:   # covers for cases just '!'. It would be '?' in the code if not for !\n            result += word   # '?' in the code if not for !\n        else:\n            sorted_word = [char for char in word]   # part_1. Words with len(word) > 1\n            sorted_word.sort()                      # part_2. It becomes four blocks.\n            # result += \"\".join(sorted_word)         # Full program. It becomes four blocks.\n            # result += \"\".join(sorted_word[:])\n\n            # Till here for letters, lowercase, uppercase\n            result += \"\".join(sorted_word)     # Adding letters in sorted words in full program\n            result += \" \"                      # Small and big alphabets are clubbed, i.e. aazzz is abzzc, but here it is abcd\n\n    return result\n\n"], ["\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    res = []\n    for i, i_row in enumerate(lst):\n        for j, j_col in enumerate(i_row):\n            if j_col == x:\n                res.append((i, j))\n\n    res.sort(key=lambda i: i[0])\n    res_new = []\n    for i, i_row in enumerate(res):\n        if i_row[0] == i:\n            i_col = tuple(reversed(i_row))\n            res_new.append(i_col)\n    return res_new"], ["\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n\n    if array == []: return []\n    \n    default_order = 1 if sum(array) % 2 == 1 else -1\n    \n    result = sort_array(array[1:])\n    \n    temp = array[0]\n    for i in range(len(result)):\n        if (temp*default_order < result[i]*default_order): break\n        if (i == len(result)-1): i += 1\n        \n    \n    result = [array[0]] + result[:i] + result[i:]\n    return result\n\n\nresult = sort_array([2, 4, 3, 0, 1, 5])\nassert result == [0, 1, 2, 3, 4, 5]\n\nresult = sort_array([2, 4, 3, 0, 1, 5, 6])"], ["\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n\n    d = 'abcdefghijklmnopqrstuvwxyz0123456789'\n    dc = d[2:] + d[:2] + d[-1]\n\n    answer = \"\"\n    for char in s:\n        if char.lower() not in d:\n            answer += char\n        else:\n            loc = d.find(char.lower())\n            answer += dc[loc]\n\n    if char.isupper():\n        answer = answer[0].upper() + answer[1:]\n\n    return answer\n\n"], ["\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    if len(lst) <= 1:\n        return None\n    lst.sort()\n    return lst[1]\n    \n"], ["\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n    sentences = map(lambda x: x.strip(), S.split(\".\"))\n    return sum(1 for s in sentences if s.strip().lower().startswith(\"i\"))\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n\n    if type(x) != int != type(y) != type(z) != int == sum((x, y, z)):\n      return False\n    if type(x) == int == type(y) == type(z) == int != sum((x, y, z)):\n      return True\n"], ["\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\n\n    def switch_case(ch_1):\n        from string import ascii_letters\n        if ch_1.islower():\n            new_case = ch_1.upper()\n        else:\n            new_case = ch_1.lower()\n\n        return new_case\n\n    def switch_chars(ch_2):\n        from string import ascii_lowercase\n        alphabet = ascii_lowercase\n        switcher = {    'a': alphabet[2:-1],\n                       'b': alphabet[3:-2],\n                       'c': alphabet[4:-3],\n                       'd': alphabet[5:-4],\n                       'e': alphabet[6:-5],\n                       'f': alphabet[7:-6],\n                       'g': alphabet[8:-7],\n                       'h': alphabet[9:-8],\n                       'i': alphabet[10:-9],\n                       'j': alphabet[11:-10],\n                       'k': alphabet[12:-11],\n                       'l': alphabet[13:-12],\n                       'm': alphabet[14:-13],\n                       'n': alphabet[15:-14],\n                       'o': alphabet[16:-15],\n                       'p': alphabet[17:-16],\n                       'q': alphabet[18:-17],\n                       'r': alphabet[19:-18],\n                       's': alphabet[20:-19],\n                       't': alphabet[21:-20],\n                       'u': alphabet[22:-21],\n                       'v': alphabet[23:-22],\n                       'w': alphabet[24:-23],\n                       'x': alphabet[25:-24],\n                       'y': alphabet[26:-25],\n                       'z': alphabet[27:-26]}\n        \n        new_ch = switcher.get(ch_2, ch_2)\n        \n        return new_ch\n\n    def put_together(message):\n        result = \"\"\n        for char in message:\n            new_char_1"], ["\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n\n    def is_prime(a):     # our own prime checking function which we will use later on\n        if 0 < a < 2:\n            return False\n        if a == 2:\n            return True\n        if a % 2 == 0:\n            return False\n        for x in range(3, a // 2 + 1, 2):\n            if a % x == 0:\n                return False\n        return True\n\n    for i in range(len(lst)):\n        if lst[i] == 0:\n            del lst[i]\n        else:\n            i += 1\n    lst.sort()\n    lst = lst[::-1]\n    lod = []\n    while lst:\n        lod.append(lst.pop())\n    print(lod)\n    mylstcopy = [x for x in lod if is_prime(x) == True]\n    def get_methods(lst):\n        while lst:\n            yield lst.pop()\n    return sum([sum([int(x) for x in str(i)]) for i in mylstcopy])\n"], ["\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    keys = list(dict.keys( ))\n    case_1 = list(map( str.islower, keys ) )\n    case_2 = list(map( str.isupper, keys ) )\n    flags = [ True if c1 or c2 else False for c1,c2 in zip( case_1, case_2 ) ]\n\n    return all(flags)\n\n"], ["\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\n\n    ans = []\n    is = [True for i in range(n)]\n    i = 2\n    while i * i <= n:\n        if i  * i <= n:\n            if is[i] == True:\n                for j in range(i ** 2, n, i):\n                    is[j] = False\n        i += 1\n    \n    while len(ans)<n:\n        if i<=n and is[i]==True:\n            ans.append(i)\n\n        i += 1\n\n    return ans\n\n"], ["\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\n    return int(str(a)[(int(-1+(len(str(a)))))] + str(b)[(int(-1+(len(str(a)))))]*int(((len(str(max(a,b))))))));"], ["\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n\n    cnt = 0\n    cntupt = 0 \n    i=0\n    while i < len(s):\n        a= s[i].isupper()\n        if a:\n            cntupt= cntupt + 1\n        if i%2 == 0:\n            i=i+1\n        else:\n            cnt=cnt + 1 \n    return cntupt\n\n"], ["\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n\n    def rounding(val):    \n        if int(val) - float(val) >=0:\n            return int(val-0.5)\n        else:\n            return int(val+0.5)\n    return rounding(float(value))\n\n"], ["\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n\n    ans, num = [], n    \n    while num != 1:\n        num = num//2 + 1 if num%2 == 1 else num//2\n        ans.append(num)\n    ans.reverse()\n    return ans\n"], ["\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n\n    words = (s.replace(\",     \", \" \").replace(\",\", \" \").replace('    ', ' ')).split(\" \")\n    return words\n"], ["\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n\n    if x > y: return x\n    if not (x % 2 == 0): return -1\n    if y % 2 == 0: return y\n    return x\n\n"], ["\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    elif n == m:\n        return \"0b\" + bin(n)[2:]\n    else:\n        sum = 0\n        for i in range(n, m + 1):\n            sum += i\n        return \"0b\" + bin(round(sum / (m - n + 1)))[2:]\n"], ["\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n\n    def judge(x):\n    \t\";; judge function for x\"\n    \tfor i in str(x):\n    \t\tif int(i)%2 == 0:\n    \t\t\treturn False\n    \treturn True\n\n    return list(filter(judge,x))\n\n"], ["\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int):\n        return (\n            {\n                1: \"One\",\n                2: \"Two\",\n                3: \"Three\",\n                4: \"Four\",\n                5: \"Five\",\n                6: \"Six\",\n                7: \"Seven\",\n                8: \"Eight\",\n                9: \"Nine\",\n            }.get(x)\n            if 1 <= x <= 9\n            else str(x)\n        )\n\n    return [to_word(element) for element in sorted(arr, reverse=True)]\n\n\nresult = by_length([2, 1, 1, 4, 5, 8, 2, 3])"], ["\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n    def fact(n):\n        if n < 0:\n            raise ValueError('Non negative numbers only!')\n        if n == 0:\n            return 1\n        return n * fact(n - 1)\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2:\n            result.append(sum(range(1, i + 1)))\n        else:\n            result.append(fact(i))\n    return result\n"], ["\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n\n    odd_cnt, even_cnt = 0, 0\n\n    for mid in range(1, n + 1):\n\n        cur_odd, cur_even = mid, mid\n        str_mid = str(mid)\n\n        while len(str_mid) > 1:\n            if str_mid[0] == str_mid[-1]:\n                str_mid = str_mid[1:-1]\n                cur_odd += 1\n                if int(str_mid) <= n:\n                    odd_cnt += 1\n            else:\n                str_mid = str_mid[1:]\n                cur_even += 1\n                if int(str_mid) <= n:\n                    even_cnt += 1\n                break\n\n    return even_cnt, odd_cnt\n\n\n"], ["\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    def judge(x: int) -> bool:\n        \"\"\"\n        A function that returns whether input integer is positive or not\n        >>> every x in [1, 2, -3, -4, 24, -1, 23, 32, 123] is positive  # doctest: +NORMALIZE_WHITESPACE\n        True\n        >>> every x in [-23, -24, -2] is not positive  # doctest: +NORMALIZE_WHITESPACE\n        True\n        \"\"\"\n        return x > 0\n    sums = [0, 0]\n    for number in arr:\n        digit_sum = 0\n        for i in str(abs(number)):\n            digit_sum += int(i)\n        sums[judge(number)] += digit_sum\n    return sums[1]\n\n"], ["\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n\n    \n    sorted_arr = sorted_arr = sorted(arr)\n    counter = 0\n    for i, j in zip(arr, sorted_arr):\n        if i == j:\n            counter += 1\n    \n    return counter == len(arr)\n\n\na = [3, 5, 4, 1, 2]\nb = [3, 4, 5, 1, 2]\nc = [1, 2, 3, 4, 5]\n   "], ["\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n\n    cnt_odd = len_b = len(lst2)\n\n    for i in range(len(lst1)-1, -1, -1):\n        if i % 2:\n            cnt_odd -= 1\n        elif (len_b or len_b - 2*cnt_odd) < 0:\n            return 'NO'\n        lst2[len_b - cnt_odd] = lst1[i]\n\n    return \"YES\"\n\n"], ["\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n\n    if test == \"\": return \"{}\"; pass\n    Store = {}; t=0;\n    alph = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\"];\n    split=test.split(\" \");\n    for element in alph:\n        for c in test:\n            if c == element:\n                t+=1;\n        Store[element]=t;\n    test = max(Store.values())\n\n    y=0;\n    for i in Store.values():\n        if i==test:\n            y+=1; Store[str(alph[9-y])+\":\"]=Store[str(alph[9-y])]\n            Store.pop(str(alph[9-y]))\n\n    str_h=Store.values();\n    str_k=Store.keys();\n\n    r=0;\n    for value in str_h:\n        if value==test:\n            r=r+1;\n\n    l=r*2;\n\n    while l != 0:\n        l=l-1;\n        print(\"%d\" % (str_k[r-l-1])+\":%d\" % (str_h[r-l-1]) + str(\" \"), end=\"\")\n            \n\n\nTESTS = [\n    \"a b b a\", #=> {'a': 2, 'b': 2}\n    '',        # => {}\n    'aaa b c', #=> {'a': 3, 'c': 1, 'b': 1}\n    'a b c d e f', #=> {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1}\n    'a a a a a b b b b b b c c c c c d d e e f f f' #=> {'a': 5, 'b': 4, 'c': 4, 'd': 2, 'e': 3, 'f': 4}\n]\n\nfor test in TESTS:\n    print(\"histogram('{t}') == {h}\".format(t=test, h="], ["\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    ss = \"\".join(filter(lambda ch = ch: ch not in s , s))\n    return (ss, ss == ss[::-1])\n"], ["\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n\n    ans, template = [], \"the number \"\n    for substring in lst:\n        count = 0\n\n        for digit in substring:\n            if int(digit) % 2 == 0:\n                continue\n            else:\n                count += 1\n\n        # tie up loose ends: add \"n\" to string placeholder as needed and create\\\n        # sentence filling in gaps\n        ans.append(template + str(count) + \"n the str\" + str(count) +\n                   \"ng \" + str(count) + \" of the \" + str(count) +\"nput.\" )\n    return ans\n"], ["\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n\n    if all(x >= 0 for x in (nums)):\n        min_sum = sum(nums)\n    else:\n        first_neg = len(nums)\n        for i, x in enumerate(nums):\n            if x < 0:\n                first_neg = min(first_neg, i)\n\n        min_sum = max(nums[first_neg:]) + sum(nums[:first_neg])\n\n    for i in range(len(nums))[::-1]:\n        s_arr = list(nums[:i+1])\n\n        s1 = min(s_arr)\n        s2 = sum(s_arr)\n\n        if s1 > 0:\n            min_sum = min(min_sum, s2)\n        elif s1 < 0:\n            min_sum = min(min_sum, s1 + s2)\n        elif s1 == 0:\n            min_sum = min(min_sum, s2)\n\n    return min_sum\n\n\nnums = [2, 3, 4, 1, -2, 4]"], ["import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n\n    ans = 0    \n    for  i in range(0, len(grid)):\n        current_bucket = 0\n        for j in range(0, len(grid[0])):\n            current_bucket=current_bucket+grid[i][j]\n            ans =  ans+current_bucket//capacity\n            current_bucket = current_bucket%capacity\n    return ans  \n\n"], ["\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    from functools import cmp_to_key\n\n    def num_ones(n):\n        s = bin(n)[2:]\n        return s.count('1')\n\n    def greater_entry(a, b):\n        if a == b:\n            return 0 if a < b else 1  # a and b are the same, select the smaller, i.e 0\n        return -1 if num_ones(a) < num_ones(b) else 1  # compare num_ones\n\n    return sorted(arr, key=cmp_to_key(lessere_entry))\n"], ["\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n\n    ans = []\n    for word in s.split(): \n        if word.count(\" \") == 0 and len(word) == n: \n            ans.append(word)\n\n    return ans\n\n"], ["\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(v):\n        \"\"\"Return True if v is a vowel, False otherwise.\"\"\"\n        return v in (\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n\n    result = \"\"\n    l = len(word) - 1\n    for i in range(l-1,-1,-1):\n        if not is_vowel(word[i]):\n            if is_vowel(word[i+1]) and not is_vowel(word[i+2]):\n                result = word[i+1]\n                break\n    return result\n    \n    "], ["\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n\n    def valid_parens(pars):\n        close_par = pars.count(\")\")\n        open_par = pars.count(\"(\")\n        if open_par == close_par:\n            return True\n        return False\n\n    if valid_parens(lst[0]) and valid_parens(lst[1]):\n        return 'Yes'\n    return 'No'\n"], ["\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n\n    return sorted(sorted(arr)[-k:], reverse=1)\n"], ["\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n\n    return sum(lst[i[0]] for i in enumerate(lst) if i[1] % 2 == 0 and lst[i[0]] % 2 != 0)\n\n"], ["\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n\n    def digits(x: int) -> int:\n        \"\"\"\n        Returns the number of digits, excluding the leading 0s\n        :param x: an integer\n        \"\"\"\n        d, ret = 1, 0\n        while d <= x:\n            d *= 10\n            ret += 1\n        return ret - digit\u5316()\n\n    N, K = len(arr), k\n    return sum((x for x in arr[ : K] if digits(x) <= 2))\n"], ["\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n\n    ans, x = [], n    \n    while x:\n        if x % 2 == 1:\n            ans.append(x)\n        x //= 2 if x % 2 == 0 else 3\n    return ans\n\n\n\n\n\nget_odd_collatz(7)"], ["\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\n    days = [31, 30, 31, 30, 32, 32, 31, 31, 30, 31, 30, 31]\n\n    \"\"\"\n    checking if the date string is empty or contains any other character other than integer, '-' or '/'.\n    a string splitted with '-' will be in a length of 3 and with '/' will be a length of 3\n    \"\"\"\n    date_list = date.split(\"-\")\n    month, day, year = date_list[0], date_list[1], date_list[2]\n\n    if len(month) > 2 or len(day) > 2 or len(year) > 4:\n        return False\n\n    for i in range(len(date)):\n        if date[i] < '0' or date[i] > '9':\n            return False\n\n    \"\"\"\n    checking if day 2 digit and add leading zero if it's single digit.\n    \"\"\"\n    if day[0] == '0' and day[-1] == '0':\n        day = day.replace(\"0\", \"\", 1)\n\n    for each in date:\n        if each in month or each in day or each in year:\n            return False\n\n    \"\"\"\n    checking if length of month, day, year and date is valid\n    \"\"\"\n    if len(month) != 2:\n        return False, \"Month length differs from required\"\n\n    elif len(day) != 2:\n        return False, \"Day length differs from required\"\n\n    elif len(year) != 4:\n        return False, \"Year length differs from required\"\n\n    elif len(date) != 10:\n        return False, \"Date length differs from required\"\n\n    if int(year) < 0 or int(year) > 4019:\n        return False, \"Year length is less than 1899 or higher than 4019\"\n\n    elif int(day) < 0 or int(day) > days[int(month)-1]:\n        return False, \"Day should be between "], ["\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n\n    whitespace = tuple(' \\n\\n\\r\\t')\n    if not ',' in txt and not whitespace in txt:\n        result =  len([x for x in txt if ord(x)%2])\n    else:\n        result = txt.split(',')\n    \n    return result"], ["\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n\n    count = dict()\n    count_1 = dict((t, 0) for t in lst)\n\n    # for i in lst:\n    #     if i in count_1:\n    #         count_1[i] = count_1[i]+1\n    # if count != 1:\n    #     return False\n\n    # for i in range(len(lst)):\n    #     if lst[i] in count_1:\n    #         count_1[lst[i]] = count_1[lst[i]]-1\n    #         if count_1[lst[i]] < 0:\n    #             return False\n    # return True\n"], ["\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n\n    def is_prime(a_param: int):\n        if a_param <= 1:\n            return False\n        elif a_param <= 3:\n            return True\n        for digit in range(2, a_param // 2):\n            if a_param % digit == 0:\n                return False\n            \n        return True\n    \n    if interval1[1] < interval2[0] or interval1[0] > interval2[1]:\n        return \"NO\"\n    else:\n        intersection_length = min(interval1[1], interval2[1]) - max(interval1[0], interval2[0]) + 1\n        return \"YES\" if intersection_length > 1 and is_prime(intersection_length) else \"NO\"\n\n\n"], ["\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n    if arr == []: return None    \n    return prod(arr)\n\nassert prod_signs([]) == None\nassert prod_signs([1, 2, 2, -4]) == -9\nassert prod_signs([0, 1]) == 0\nassert prod_signs([1, 2, 3, 4, 5]) == 15\nassert prod_signs([9, 2, 3, 4, 5]) == 60\nassert prod_signs([9, 2, -3]) == -72\n"], ["\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n\n    N = len(grid)\n    \n    # Will store the current lowest path with step k\n    # Highest value on the path: the steps list on the first row on the final step\n    # Lowest value on the path: the steps list on the last row on the final step\n    steps = [0] * (N + 1)\n\n    \n    for i in range(N - 1, -1, -1):\n        for j in range(N - 1, -1, -1):\n\n            # Finding the minimum sum at each point\n            neighbour_to_explore = []\n            if j < N - 1:\n                neighbour_to_explore.append(grid[i][j + 1])\n            if i < N - 1:\n                neighbour_to_explore.append(grid[i + 1][j])\n\n            steps[i] = min(steps[i] + v if i < N - 1 else v for v in neighbour_to_explore)\n            \n    # Min sum at the first column\n    path_min = steps[0]\n    print(f\"Min path at first col is: {path_min}\")\n\n    # Min path index\n    path_min_idx = 0\n    for index, value in enumerate(steps):\n        if value < path_min:\n            path_min = value\n            path_min_idx = index\n\n    # Trimming the path to the closest neighbour\n    # Path at the first step\n    steps_list = [grid[0][path_min_idx]]\n    # Initializing the outer step\n    # Tracking the direction moving around (upwards / downwards)\n    a = 0\n    b = 0\n    while path_min_idx != 0 and path_min_idx != N - 1:\n        new_idx = path_min_idx\n\n        # Upwards\n        if a + b < 1:\n            a += 1\n            # Forward\n            if path_min_idx < N - 1 and steps[path_min_idx + 1] < steps[path_min_idx]:\n                new_idx = path_min_idx + 1"], ["\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n\n    if n == 0: \n        output = [0]\n    elif n < 0:\n        return \"Error: You cannot take the Tribonacci sequence from a negative number.\"\n    else:\n        output = [0, 1, 2]\n        while len(output) < n + 1:\n            next = sum(output[-3:])\n            output += [next]\n    return output\n            "], ["\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n\n    has_odd, prod = has_any_digit(n), 1\n\n    while n != 0:\n        if hasdigit(n, 1):\n            prod *= getdigit(n)\n        n //= 10\n\n    return prod\n\n"], ["\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)-2):\n        if(string[i]=='[' and string[i+1]==']' and string[i+2]==']'):return True\n        if(string[i]=='[' and string[i+1]==']' and string[i+2]=='['):return True\n    return False"], ["\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n\n    import math\n    return sum( math.ceil(num*num) for num in lst )\n\n\nlst = [1,2,3,12,557.7]"], ["\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n\n    if len(txt) == 0:\n        return False\n\n    space_idx = txt.rfind(\" \")\n\n    if space_idx == -1:\n        return txt[len(txt)-1] >= \"a\" and txt[len(txt)-1] <= \"z\"\n\n    return txt[len(txt)-1] >= \"a\" and txt[len(txt)-1] <= \"z\" \n\n"], ["\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n\n    for i in range(len(arr)):\n        for j in range(len(arr)-i-1):\n            if arr[j]>=arr[j+1]:\n                return j\n    \n    return -1\n"], ["\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    neg = list(filter(lambda neg: neg < 0, lst))\n    pos = list(filter(lambda pos: pos > 0, lst))\n\n    a = neg[0] if len(neg) > 0 else None\n    b = pos[0] if len(pos) > 0 else None\n\n    return (a, b)\n"], ["\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n\n    num_a = float(str(a).replace(',', '.'))\n    num_b = float(str(b).replace(',', '.'))\n\n    if num_a == num_b:\n        return None\n    elif num_a > num_b:\n        return a\n    return b\n\n\n\n\n"], ["\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\n    return n >= 8 and n  % 4 == 0\n\n\n"], ["\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n\n    fac, ans = 1, 1\n    n -= 1\n    while n >= 0:\n        ans *= n\n        n -= 2\n        fac += 1\n    return ans * fac\n\n\n    "], ["\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\n    ans = text\n    for i = 1:length(text)\n        if \n"], ["\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    if len(list(filter(list(filter(lambda x: x in file_name, \"0123456789\"))))) > 3:\n        return \"No\"\n    elif file_name.count(\".\") != 1:\n        return \"No\"\n    else:\n        return \"Yes\"\n\n"], ["\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\n    ans = 0\n    for  i in range(len(lst)):\n        if (i%3==0):\n            ans += lst[i]**2\n            continue\n        if (i%4==0):\n            ans += lst[i]**3\n            continue\n        continue\n    return ans\n\n"], ["\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\n\n    def is_prime(a_number):\n        \"\"\"\n        Returns:\n        boolean -- true if the given number in prime else false.\n        \"\"\"\n        if a_number == 1:\n            return False\n         \n        # Iterate from 2 to n / 2\n        for i in range(2, int(a_number ** 0.5) + 1): \n            if a_number%i == 0:\n                return False\n             \n        return True\n    \n\n    from collections import OrderedDict\n    return ' '.join([word for word in OrderedDict.fromkeys(sentence.split()) if not is_prime(len(word))])\n\n"], ["\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n\n    x1, x2 = x.split(\"/\")\n    x1, x2 = int(x1), int(x2)\n    n1, n2 = n.split(\"/\")\n    n1, n2 = int(n1), int(n2)\n\n    return (x1 * n2) % n1\n\n"], ["\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def weight(x):\n        weightage = 0\n        for i in str(abs(x)):\n            weightage += int(i)\n        return x < 0 and -weightage or weightage\n\n    nums.sort(key=weight)\n    return nums"], ["\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\n    ans, odd = 0, 0\n    for num in range(len(nums)):\n        odd = int((nums[num] % 10) * (nums[num] / 10))\n        if (nums[num] > 10) and (odd == 1):\n            ans += 1\n    return ans\n\n"], ["\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n\n    if n <= 2:  # Could also add another check if n != 1\n        return 0\n        # FIXME some edge case maybe??\n\n    count = 0\n    multiples = (x for x in range(1, n + 1) if x % 3 == 0)  # shorten list\n    for i in multiples:\n        for j in multiples:\n            for k in multiples:\n                if i < j < k:\n                    count += 1\n    \n    return count\n\nassert get_max_triples(10) ==5 "], ["\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    try:\n        x = planets.index(planet1)\n        y = planets.index(planet2)\n    except KeyError:\n        return ()\n\n    if planet1 == planet2:\n        return ()\n    \n    if x < y:\n        b = planets[:x - 1:-1]\n        rem = planets[y:x:-1]\n        ans = planets[y:x-1:-1] + planets[x+1:]\n    else:\n        b = planets[:x+1][1:] + planets[:x:-1][::-1]\n        rem = planets[x+1:y][::-1]\n        ans = planets[x+1:y+1] + planets[y+1:]\n    \n    return tuple(list(set(ans) - set(rem) - set(b)))\n"], ["\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\n    from functools import cmp_to_key\n\n    return lst\n\n    # Sort order by length, then alphabetically.\n    def length_and_strs_comparator(a, b):\n        # If a and b have different length - return the difference.\n        if len(a) != len(b):\n            return len(b) - len(a)\n\n        # If a and b have the same length (100%) - compare alphabetically.\n        return (a > b) - (a < b)\n\n    order_by_length = OrderedDict.fromkeys(set(lst))\n    order_by_length = sorted(order_by_length, key=cmp_to_key(length_and_strs_comparator))\n\n    def alphabetically_strs_comparator(a, b):\n        return (a > b) - (a < b)\n\n    order_by_length = sorted(order_by_length, key=cmp_to_key(alphabetically_strs_comparator))\n\n    return order_by_length\n\n"], ["\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\n    def is_prime(a):\n        return isinstance(a, int) and len(list(range(2, a))) == 0\n\n    if is_prime(n):\n        return x\n    else:\n        return y\n"], ["\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n\n    ans = 0\n    for num in lst  :\n        if num >= 0 and num % 2 !=0 :\n            ans += num**2\n        elif num % 2 ==0 :\n            ans += 0\n        \n    return ans "], ["\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n\n\n    return [abs(game[game.index(i)] - i)"], ["\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n\n    def strength(s: str) -> str:\n        import re\n        cap, words = 0, re.findall(\"\\D+|\\d+\", s)\n        for i in range(len(words)):\n            if words[i].isdigit():\n                words[i] = int(words[i])\n            else:\n                cap += len(words[i])\n                words[i] = -len(words[i])\n        return float(cap - sum(words))\n\n\n    return class_name + \".\" + sorted([e for e in extensions], key=strength)[-1]\n\n\n    \n\n"], ["\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n\n    if a == b:\n        if a in b or b in a:\n            if (b in a and len(b) == len(a) and b == a) or (a in b and len(A) == len(b) and a == b):\n                return False\n            else:\n                return True\n        else:\n            return False\n\n    else:\n        return ((b in a) or (a in b) or (find_rotation(a, b) or find_rotation(b, a)))          \n            \n"], ["\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    c = list(str(abs(num)))\n    for i in c :\n        if i.isdigit():\n            if int (i) % 2 == 0 :\n                even += 1\n            else :\n                odd += 1\n                \n    return even,odd\n"], ["\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n\n    m = [\"\", \"m\", \"mm\", \"mmm\", \"\"]\n    c = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dd\", \"ddd\", \"dcd\", \"cdd\"]\n    x = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxl\", \"xc\"]\n    i = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vv\", \"vvv\", \"vivid\", \"iv\"]\n\n    m100 = ((number // 100 % 10) * 100)\n    num = number - m100\n    c100 = ((num // 10 % 10) * 10)\n    num = num - c100\n    x100 = ((num // 1 % 10))\n\n    roman = m[m100 // 10] + c[c100 // 10] + x[x100 // 1] + i[num % 10]\n\n\n    return roman\n\n\n\n\n"], ["\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    \n    return a ** 2  + b** 2 == c**2\n"], ["\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\n\n    mx_ch_cnt_wrd_len = 0\n    mx_len_wrd_indx = -1\n    l = len(words)\n    for idx in xrange(l):\n        ch_cnt = {}\n        for ch in words[idx]:\n            if ch in ch_cnt:\n                ch_cnt[ch] += 1\n            else:\n                ch_cnt[ch] = 1\n\n        ch_cnt_len = len(ch_cnt.keys())\n        if ch_cnt_len > mx_ch_cnt_wrd_len:\n            mx_ch_cnt_wrd_len = ch_cnt_len\n            mx_len_wrd_indx = idx\n\n    return words[mx_len_wrd_indx]\n\n"], ["\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n\n    if need <= remaining:\n    \treturn [number + need, remaining - need]\n    else:\n    \treturn [number + remaining, remaining - remaining]\n\n\n"], ["\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n\n    exp = \"\"\n    for exp in operator:\n        print ('e: {}'.format(e))\n\n    return exp\n"], ["\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    ans, has_letter = \"\", has_digit = False\n    for c in s:\n        if not has_digit and c.isdigit():\n            has_digit = True\n        if has_digit:\n            ans += c\n        else:\n            if c.isalpha():\n                ans += c.swapcase()\n            else:\n                ans += c\n\n    if not has_letter:\n        return ans[::-1]\n    else:\n        return ans\n"], ["\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    # return None if text is null\n    if text == '':\n        return None\n\n    import hashlib\n    new_text = text.encode()  # required to calculate md5 since it accepts byte, not string\n    md5 = hashlib.md5()\n    md5.update(new_text)\n    return md5.hexdigest()\n"], ["\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n\n    if a > b: a: b = (b,a)\n    length = len(str(b))\n    a = int(str(a).ljust(length,\"0\"))\n    b = int(str(b).ljust(length,\"0\"))\n    result = []\n    for i in range(a, b+1):\n        if len(str(i)) >= 2:\n            if str(i)[1] == \"2\" and str(i)[2] == \"0\": result.append(str(i))\n            if len(str(i)) == 3: \n                if str(i)[2] == \"2\" and str(i)[3] == \"0\": result.append(str(i))\n    return(result)\n\n"]]