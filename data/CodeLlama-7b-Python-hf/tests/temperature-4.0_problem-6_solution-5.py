from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """ Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """
    def count_level(chars):
        # Base cases
        # We start by counting the first parentheses and reducing 1 point to the result to eliminate the first parenthesis.
        # Then if we have 2 or higher points, we go deeper into this function by reducing the number of parenthesis by the same number from the result.
        # Then if we have even number of parenthesis, we go back to the next base case for the reduced string.

        result = 1
        for character in chars:
            if character == ')':
                result += 1
            # Check if the string has more than 1 closing parentheses.
            if result > 1:
                result -= 1

            if result == 0:

                # If there is a zero points we have counted all the
                # nested brackets and need to return the counter back to base case.
                break
            if character == '(':
                # If we have equal number of parenthesis we can return since we've now counted them correctly
                # if there is only one parentheses.
                if result == 1:
                    return
                # The number of nested brackets is still increasing, we must continue counting.
                else:
                    result -= 1

    return [count_level(parenstring) for parenstring in paren_string.split(' ')]




import numpy as np

def is_floats(x) -> bool:
    # check if it is float; List[float]; Tuple[float]
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False


def assertion(out, exp, atol):
    exact_match = out == exp

    if atol == 0 and is_floats(exp):
        atol = 1e-6
    if not exact_match and atol != 0:
        np.testing.assert_allclose(out, exp, atol=atol)
    else:
        assert exact_match


def check(candidate):
    inputs
    results = [[2, 3, 1, 3], [1, 2, 3, 4], [4], [], [3], [2], [3], [5], [3], [2], [1], [2], [5], [8], [5], [7], [6], [9], [7], [6], [11], [10], [1], [8], [4], [3], [1], [5], [6], [10], [5], [4], [8], [9], [3], [6], [3], [5], [3], [5], [16], [13], [11], [6], [11], [3], [1], [22], [10], [15], [17], [19], [6], [3], [11], [11], [22], [12], [12], [8], [8], [1], [14], [14], [16], [10], [11], [18], [20]]
    for i, (inp, exp) in enumerate(zip(inputs, results)):
        assertion(candidate(*inp), exp, 0)


check(parse_nested_parens)